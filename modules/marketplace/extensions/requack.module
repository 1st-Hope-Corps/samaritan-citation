<?php

/*
 * Requests / Acknowledgements: A contentType called request,
 * which when completed with a user id, becomes an acknowledgement 
 * for which each user has a total
**/


$names = variable_get('cc_transaction_types', array('requack'=>array('request'=>'Request', 'acknowledgement'=>'Acknowledgement')));
DEFINE('CC_REQUEST', $names['requack']['request']);
DEFINE('CC_ACKNOWLEDGEMENT', $names['requack']['acknowledgement']);

/** 
 * http://api.drupal.org/api/function/hook_help/6
 */
function requack_help($section) {
  switch ($section) {
    case 'admin/help#transaction':
      return t('A contentType called request, which when completed with a user id, becomes an acknowledgement for which each user has a total.');
  }
}

/** 
 * http://api.drupal.org/api/function/hook_node_info/6
  * This hook is required for modules to define one or more node types.
 */
function requack_node_info() {
  $types['requack'] = array(
    'name' => CC_REQUEST .'/' . CC_ACKNOWLEDGEMENT,
    'module' => 'requack',
    'description' => t('A contentType which when completed with a user id, becomes an acknowledgement for which each user has a total.'),
    'has_title' => TRUE,
    'title_label' => t('A need to be met by a user'),
    'has_body' => FALSE,
    'status' => TRUE,
  );
return $types;
}

function requack_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'transactions') .'/views',
  );
}

/*
 * Custom hook for complementary_currencies package
 * implementation of hook_payment_types
 */
function requack_transaction_types(){
  return array(
    'requack' => array (
      'request' => 'An open request for an unpaid task to be completed', 
      'acknowledgement' => 'A credit for completing an unpaid task', 
    ),
  );
}

function requack_perm() {
  return array('create requacks', 'complete requacks', 'edit any requack');
}

function requack_load(&$node) {
  $node->completer_uid = db_result(db_query('SELECT completer_uid FROM {cc_requack} WHERE nid = %d', $node->nid));
}

function requack_form($node) {
  //this type consists only of the title and the user who completed it.
  //so we just get a list of users
  $names = variable_get('cc_transaction_types', array('requack'=>array('request'=>'Request', 'acknowledgement'=>'Acknowledgement')));
  $users  = get_all_user_accounts(); //that means this module is dependent on transactions
  $users[0]= t('nobody yet');
  ksort($users);
  $form['title']=array(
    '#type'=>'textfield',
    '#title'=>check_plain($type->title_label),
    '#required'=>TRUE,
    '#default_value'=>$node->title
  );
  $form['completer_uid'] = array(
    '#type'=>'select',
    '#title'=> t('Who has fulfilled this @type?', array('@type' => CC_REQUEST)),
    '#default_value' => $node->completer_uid,
    '#weight'=> -4,
    '#options'=>$users,
    '#required' => TRUE
  );
  return $form;
}

/** 
 * Implementation of hook_form_alter)().
 * http://api.drupal.org/api/function/hook_form_alter/6
 */
function requack_form_alter(&$form, $form_state, $form_id){
  if ($form_id=='requack_node_form'){
    $form['menu']['#type']='hidden';
    $form['path']['#type']='hidden';
    $form['comment_settings']['#type']='hidden';
    $form['options']['#type']='hidden';
    $form['revision_information']['#type']='hidden';
	  unset($form['buttons']['preview']);
  }
}

function requack_insert($node) {
  db_query('INSERT into {cc_requack} (nid, completer_uid) VALUES (%d, %d)', 
    $node->nid, $node->completer_uid
  );
  requack_recount_acknowledgements($node->completer_uid);
}
function requack_update($node) {
  db_query('UPDATE {cc_requack} SET completer_uid = %d WHERE nid = %d', 
    $node->completer_uid,
    $node->nid
  );
  //if the acknowledgee is changed, this won't recount the previous one
  requack_recount_acknowledgements($node->completer_uid);
}
function requack_delete($node) {
  $uid = db_result(db_query('SELECT completer_uid from {cc_requack} WHERE nid = %d', $node->nid));
  db_query('DELETE from {cc_requack} WHERE nid = %d', 
  $node->nid
  );
  drupal_set_message("deleting '".$node->title . "' and recounting ".CC_ACKNOWLEDGEMENT."s for user: ".$uid);
  requack_recount_acknowledgements($uid);
}

function requack_recount_acknowledgements($uid) {
  $count = db_result(db_query('SELECT count(completer_uid) from {cc_requack} WHERE completer_uid = %d', $uid));
  //This is two queries because it's more likely to work accross different databases than doing 'ON DUPLICATE KEY INSERT'
  db_query('DELETE FROM {cc_requack_count} WHERE uid = %d', $uid);
  db_query('INSERT INTO {cc_requack_count} (uid, count) VALUES (%d,%d)', $uid, $count);
}

function requack_user ($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load': 
      $count = db_result(db_query('SELECT count FROM {cc_requack_count} WHERE uid = %d', $account->uid));
      $account->acknowledgements = intval($count);
    case 'view':
      $account->content['details']['summary']['acknowledgements'] = array (
        '#type' => user_profile_item,
        '#title' => CC_ACKNOWLEDGEMENT.'s', //this is a temporary plural hack, and will be themed out anyway
        '#value' => $account->acknowledgements,
      );
  }
}
