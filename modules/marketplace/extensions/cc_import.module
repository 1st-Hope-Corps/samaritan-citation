<?php

function cc_import_help() {
    switch ($section) {
    case 'admin/help#cc_import':
      return t('Provides advice and a simple text box to paste csv style data from your existing spreadsheets. This is a work in progress');
  }
}

/**
 * Implementation of hook_menu)().
 * http://api.drupal.org/api/function/hook_menu/6
 */
function cc_import_menu() {
  $items['admin/settings/marketplace/import'] = array (
    'title' => t('Import Tools'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_balances_form'),
    'access callback' => 'transactions_access',
    'access arguments' => array('delete'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  $items['admin/settings/marketplace/import/balances'] = array(
    'title' => t('Import Balances'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/settings/marketplace/import/offers'] = array(
    'title' => t('Import Offers'),
    'page callback' => 'drupal_get_form',
      'page arguments' => array('import_offers_form'),
    'access callback' => 'transactions_access',
    'access arguments' => array('delete'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/settings/marketplace/import/wants'] = array(
    'title' => t('Import Wants'),
    'page callback' => 'drupal_get_form',
      'page arguments' => array('import_wants_form'),
    'access callback' => 'transactions_access',
    'access arguments' => array('delete'),
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}


function import_balances_form(&$form_state) {
  //check that no transactions have already taken place
  if (db_result(db_query("SELECT * FROM {cc_transactions}"))) {
    return array('#prefix' => 'You can only import "carried forward" balances before any transactions have been entered on the system.');
  }

  $form['#prefix'] = t("This page allows you to import users' balances and gross incomes for users already on the system. To import users, see the !import_user module.",
    array(
      '!import_user'=>l('import_user', 'http://drupal.org/project/import_user')
    )
  );
  $form['#prefix'] .= "\n<br /><br />\n".t("Paste paste 2 or 3 comma separated columns into the field below, the first column should be the uid or username, the second column the current balance, and optionally the third column should be the user's gross income until now (turnover). This tools assumes there is only one currency in the system. The second column SHOULD add up to 0 for LETS and other zero balance systems, but this is not checked." );

  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => $form_state['values']['data'],
    '#required' => TRUE  
  );
  $form['import_balances'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'user/'.variable_get('cc_balancing_account_num', NULL).'/statement';
  return $form;
}

function import_balances_form_validate($form, &$form_state) {
  if (!(variable_get('cc_balancing_account_num', NULL))) {
    form_set_error('', t('to import balances you need a balancing account. Specify the account number at !admin/settings/marketplace', array('!admin/settings/marketplace'=> l('admin/settings/marketplace','admin/settings/marketplace'))));
  }

  $fields = str_get_csv($form_state['values']['data'], ",", '"');
  check_users($fields);

  foreach ($fields as $rownum => $row) {
    //check integrity of balances, the second field
    if (!intval($row[1])) {
      form_set_error('data', t("balance (second item) on row @num is not an integer", array('@num'=>$key+1)));
    }
  
    //check integrity of gross income, the optional third field
    if (isset($row[2])){
      if (!intval($row[2])) {
        form_set_error('data', t("gross income (third item) on row @rownum must be a positive integer", array('@rownum'=>$rownum+1)));
      } elseif ($row[2] < 0) {
        form_set_error('data', t("gross income (third item) on row @rownum cannot be less than 0", array('@rownum'=>$rownum+1)));
      }
    }
  }
}

function import_balances_form_submit($form, &$form_state) {
  $fields = convert_data($form_state['values']['data']);

  $balancing_account = variable_get('cc_balancing_account_num', NULL);
  foreach ($fields as $key=>$row) {
    $stats=explode(',',$row);
    $balance = $stats[1];
    if (isset($stats[2])) {
      $turnover=$stats[2];
    }
    if (is_numeric($stats[0])){
      $member = user_load(array('uid'=>$stats[0]));
    } else {
      $member = user_load(array('name'=>$stats[0]));
    }
    //if there is a gross income(turnover), we make two transactions, +turnover, then -turnover+balance
    if ($stats[2]) {
      $incomes = prepare_transaction_node(t("Gross income to date"), $balancing_account,  $member->uid, $turnover);
      $incomes->payer_uid = $balancing_account;
      $incomes->payee_uid = $member->uid;
      $receipts = prepare_transaction_node(t("Gross expenditure to date"), $balancing_account,  $member->uid, $balance-$turnover);
      $receipts->payer_uid = $member->uid;
      $receipts->payee_uid = $balancing_account;
      node_save($incomes);
      node_save($receipts);
    } else {//if there is only balance, we do one transaction, which is simply + balance
      $transaction=prepare_transaction_node(t("Carried Forward"), $balancing_account,  $member->uid, $balance);
      if (intval($balance > 0)) {
        $transaction->payer_uid = $balancing_account;
        $transaction->payee_uid = $member->uid;
      } else {
        $transaction->payee_uid = $balancing_account;
        $transaction->payer_uid = $member->uid;
      }
      node_save($transaction);
    }
  }
}

function import_offers_form(&$form_state) {
  $form['#prefix'] = import_prefix('offers');
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => $form_state['values']['data'],
    '#required' => TRUE  
  );
  $form['import_balances'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'directory/recent/offer';
  return $form;
}

function import_offers_form_validate($form, &$form_state) {
  import_offers_wants_form_validate($form, $form_state);
}
function import_wants_form_validate($form, &$form_state) {
  import_offers_wants_form_validate($form, $form_state);
}

function import_offers_form_submit ($form, &$form_state) {
  $fields = convert_data($form_state['values']['data']);
  foreach ($fields as $row) {
    $want= prepare_offer_want_node('offer', $row[0], $row[1]);
    node_save($want);
  }
}

function import_wants_form(&$form_state) {
  $form['#prefix'] = import_prefix('wants');
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => $form_state['values']['data'],
    '#required' => TRUE  
  );
  $form['import_balances'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'directory/recent/want';
  return $form;
}

function import_offers_wants_form_validate($form, &$form_state) {
  $fields = convert_data($form_state['values']['data']);
  check_users($fields);
  foreach ($fields as $rownum => $row) {
    //we've checked the users (field1) already, so now check the description
    if (strlen($row[1] > 128)) {
      form_set_error('data', t('The description on row @rownum is more than 128 characters', array('rownum' => $rownum)));
    }
    //now check the taxonomy term exists, and flag an error if it doesn't
    check_terms($fields);
  }
}

function import_wants_form_submit ($form, &$form_state) {
  $fields = convert_data($form_state['values']['data']);
  foreach ($fields as $row) {
    $want= prepare_offer_want_node('want', $row[0], $row[1]);
    node_save($want);
  }
}


/*
 * Helper Functions
*/

function import_prefix($type) {
  return t('This page allows you to import users\' @type for users already on the system. There are other ways of doing this, but this is simple and maintained along with the rest of the Complementary Currencies module.
  <br />
  <br />Use a spreadsheet tool to prepare a list of user ids, or names, and their @type in one line. For aesthetic reasons, there is a 128 character limit on each description. Each line should look like this:<blockquote><strong>"userID","Description of @type","categories(optional)"</strong></blockquote> Try importing one or two first.',
    array('@type' => $type)
  );
}

function convert_data($data) {
  $rows= explode("\n",$data);
  if (!count($rows)) {
    form_set_error('data', t('no data entered'));
    return;
  }
  foreach ($rows as $rownum=>$row) {
    $stats=explode('","',$row);
    //trim the quotes off, if any
    foreach ($stats as $key => $stat) {
      $stats[$key]=trim($stat, '"');
    }
    //put the nicely formatted row into the array to be returned
    $fields[$rownum] = $stats;
  }
  //returns a nicely structured array like this:
  //array(rownum=>array(field1, field2, etc))
  return $fields;
}

//check that the user ids or names actually correspond to a user on the system
function check_users($fields) {
  foreach ($fields as $rownum => $row){
    if (is_numeric($row[0])){
      $member = user_load(array('uid'=>$row[0]));
    } else {
      $member = user_load(array('name'=>$row[0]));
    }
    if (!$member->name) {
      form_set_error('data', t("user (first item) on row @rownum is not a user", array('@rownum'=>$rownum+1)));
    }
  }
}

function check_terms($fields) {
  //TODO
  return;
}

function prepare_transaction_node($title, $starter, $completer, $quantity){
  global $user;
  $node = new stdClass();
  $node->title = $title;
  $node->type = 'transaction';
  $node->created = time();
  $node->changed = $node->created;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->format = 1;
  $node->uid = $user->uid;
  //transaction properties
  $node->quality = 0;
  $node->currency = 0;
  $node->starter_uid = $starter;
  $node->completer_uid = $completer;
  $node->quantity = abs($quantity);
  return $node;
}

function prepare_offer_want_node($type, $owner, $description) {
  global $user;
  $node = new stdClass();
  $node->title = $description;
  $node->type = $type;
  $node->created = time();
  $node->changed = $node->created;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->format = 1;
  $node->uid = $owner; 
  return $node;
}
