<?php
// $Id: offers_wants.module,v 1.7 2009/01/30 10:41:48 matslats Exp $
/**
 * Implementation of hook_help)().
 * http://api.drupal.org/api/function/hook_help/6
 */


function offers_wants_help($section) {
  switch ($section) {
    case 'admin/help#offers_wants':
      return t('Defines two contentTypes called Offer and Wants which are created and edited by each user and which are compiled to make a directory.');
  }
}

/**
 * Implementation of hook_node_info)().
 * http://api.drupal.org/api/function/hook_node_info/6
  * This hook is required for modules to define one or more node types.
 */
function offers_wants_node_info(){
  //the status = true seems to have no effect so it's fixed in form_alter
  if (variable_get('cc_offers_enabled', TRUE)) {
    $types['offer'] = array(
      'name' => t('Offer'),
      'module' => 'offers_wants',
      'description' => t('An entry in the offers directory.'),
      'has_title' => TRUE,
      'title_label' => t('Product or service you want to sell'),
      'status' => TRUE
    );
  }
  if (variable_get('cc_wants_enabled', TRUE)) {
    $types['want'] = array(
      'name' => t('Want'),
      'module' => 'offers_wants',
      'description' => t('An entry in the wants directory.'),
      'has_title' => TRUE,
      'title_label' => t('Product or service you want to buy'),
      'status' => TRUE
    );
  }
  return $types;
}

function offers_wants_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'transactions') .'/views',
  );
}

function offers_wants_config_form() {
  $form['cc_offers_enabled'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Enable offers'),
    '#default_value' => variable_get('cc_offers_enabled', TRUE),
    '#help' => t('If you want a directory, you should nominate a vocabulary to define the categories - !link', array('!link'> url('admin/content/taxonomy')))
  );
  $form['cc_wants_enabled'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Enable wants'),
    '#default_value' => variable_get('cc_wants_enabled', TRUE),
    '#help' => t('If you want a directory, you should nominate a vocabulary to define the categories - !link', array('!link'> url('admin/content/taxonomy')))
  );
  $form['cc_goodsandservices'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Enable Goods and Services'),
    '#default_value' => variable_get('cc_goodsandservices', FALSE),
    '#help' => t('Each offer and want can be subdivided into goods and services, and the directory pages and views can be organised accordingly, although this can get complicated, as there will need to be a whole new set of views')
  );

  $form['#suffix'] = 'It is also possible to enable the node body for offers and wants, but some work would need to be done on the templating first';
  $form['#redirect'] = 'admin/settings/marketplace';
  return system_settings_form($form);
}

/**
 * Implementation of hook_menu)().
 * http://api.drupal.org/api/function/hook_menu/6
 */
function offers_wants_menu(){
  $items['admin/settings/marketplace/directory'] = array(
    'title' => t('Offers and Wants'),
    'description' => t('Default currency, transaction ratings and directory settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offers_wants_config_form'),
    'access arguments' => array('administer content types'),
    'menu_name' => 'complementary-currencies',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK
  );
  if (variable_get('cc_offers_enabled', TRUE)) {
    $items['directory/categories/offer'] = array(
      'title' => t('Offer categories'),
      'description' => t('A list of categories in the offers directory'),
      'page callback' => 'type_categories_count',
      'page arguments' => array('offer', 'directory/recent/offer'),
      'access arguments' => array('view directory'),
      'menu_name' => 'complementary-currencies',
    );
   $type_names[]=t('offers');
  }
  if (variable_get('cc_wants_enabled', TRUE)) {
    $items['directory/categories/want'] = array(
      'title' => t('Want categories'),
      'description' => t('A list of categories in the wants directory'),
      'page callback' => 'type_categories_count',
      'page arguments' => array('want', 'directory/recent/want'),
      'access arguments' => array('view directory'),
      'menu_name' => 'complementary-currencies',
    );
   $type_names[]=t('wants');
  }
  $type_names = implode(' '.t('and').' ', $type_names);
  $items['user/%/directory'] =array(
    'title' => t("Directory"),
    'description' => t("All the @types from this user", array('@types'=>$type_names)),
    'page callback' => 'show_user_offers_wants',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view directory'),
    'type' => MENU_LOCAL_TASK
  );
  $items['user/directory'] =array(
    'title' => t('My Directory'),
    'description' => t("All your @types", array('@types'=>$type_names)),
    'page callback' => 'show_user_offers_wants',
    'access callback' => 'offers_wants_access',
    'access arguments' => array('create', 'offer'),
    'menu_name' => 'complementary-currencies',
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter)().
 * http://api.drupal.org/api/function/hook_menu_alter/6
  * This hook is required for modules to define one or more node types.
 */

function offers_wants_menu_alter(&$items){
  $items['node/add/offer']['type']=MENU_CALLBACK;
  $items['node/add/want']['type']=MENU_CALLBACK;
}

/**
 * Implementation of hook_perm)().
 * http://api.drupal.org/api/function/hook_perm/6
 */
function offers_wants_perm(){
  $permissions = array('view directory', 'edit directory');
  if (variable_get('cc_offers_enabled', TRUE)){
    $permissions[]='publish offer';
  }
  if (variable_get('cc_wants_enabled', TRUE)){
    $permissions[]='publish want';
  }
  return $permissions;
}

/**
 * Implementation of hook_access)().
 * http://api.drupal.org/api/function/hook_access/6
 */
function offers_wants_access($op, $node=NULL, $account=NULL){
  if (is_string($node)){
    $type=$node;
  } else {
    $type=$node -> type;
  }
  switch ($op){
    case 'create':
	    return user_access('publish '.$type);
      break;
    case 'update':
    case 'delete':
      //user can always access their own offers/wants
      if ($node ->uid == $account -> uid || user_access('edit_directory')) return TRUE;
      break;
    case 'view':
      return user_access('view directory');
  }
}

function offers_wants_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    foreach (array('offer', 'want') as $type) {
      if (variable_get('cc_'.$type.'s_enabled', TRUE)){
        $blocks['directory_categories_' . $type]= array(
          'info' => t('@offer_or_want categories', array('@offer_or_want' => ucfirst($type))),
          'cache' => BLOCK_CACHE_PER_PAGE
        );
      } 
    }
    return $blocks;
  } elseif ($op == 'view') {
    switch ($delta) {
      case 'directory_categories_offer':
        return array(
          'subject' => t('Offer Categories'),
          'content' => type_categories_count('offer', 'directory/recent/offer')
        );
      case 'directory_categories_want':
        return array(
          'subject' => t('Want categories'),
          'content' => type_categories_count('want', 'directory/recent/want')
        );
    }
  }
}

/**
 * Implementation of hook_form)().
 * http://api.drupal.org/api/function/hook_form/6
 */
function offers_wants_form(&$node, $param){
  global $user;
  $type = node_get_types('type', $node);
  $form['title']=array(
    '#type'=>'textfield',
    '#title'=> check_plain($type->title_label),
    '#required'=>TRUE,
    '#default_value'=>$node->title,
  );
  if ($type->has_body) {
    $form['body']=array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#required' => FALSE,
    );
  }
  //drupal_set_title (t('Editing @type', array('@type' => $type->name)));
  $form['#redirect']='user/'.$user->uid.'/directory';
  return $form;
}

/**
 * Implementation of hook_form_alter)().
 * http://api.drupal.org/api/function/hook_form_alter/6
 */
function offers_wants_form_alter(&$form, $form_state, $form_id){
	//print_r($form);
  if ($form_id=='offer_node_form' || $form_id == 'want_node_form'){
    $form['menu']['#type'] = 'hidden';
    $form['path']['#type'] = 'hidden';
    $form['comment_settings']['#type'] = 'hidden';
    $form['options']['#type'] = 'hidden';
    $form['options']['status']['#value'] = TRUE;
    $form['revision_information']['#type'] = 'hidden';
  	unset($form['buttons']['preview']);
    if ($form['buttons']['delete']) {  //redirect interferes with delete
      unset($form['#redirect']);
    }
  }
}

/** 
 * Implementation of hook_theme)().
 * http://api.drupal.org/api/function/hook_theme/6
 */
function offers_wants_theme($existing, $type, $theme, $path){
  //HELP!! I can't get it to recognise the offer.tpl.php in the module folder
  return array(
    'offer'=> array(
      'arguments' => array('form' => NULL),
      'template' => 'offer',
    ),
    'want'=> array(
      'arguments' => array('form' => NULL),
      'template' => 'want',
    ),
    'add_directory_entry' => array(
      'arguments' => array('type' => NULL),
      'function' => 'theme_add_directory_entry',
    ),
    'printable_directory_link' => array(
      'arguments' => array('type' => NULL),
      'function' => 'theme_printable_directory_link',
    ),
  );
}


//this returns two views showing offers and wants for a given user
function show_user_offers_wants($uid=NULL){
  if (!$uid){
    global $user;
    $args= func_get_args();
    $uid = $args[0] or $uid = $user->uid;
  }
  $page="";
  if (variable_get('cc_offers_enabled', TRUE)) {
    $view1 = views_get_view('user_directory');
    $page .= $view1 -> execute_display('page_1', array($uid));
  }

  if (variable_get('cc_wants_enabled', TRUE)) {
    $view2 = views_get_view('user_directory');
    $page .= $view2 -> execute_display('page_2', array($uid));
  }

  if ($user -> uid == $uid) { //this code is used elsewhere and could be put into a function
    drupal_set_title(t('My Directory'));
  } else {
    $that_user = user_load(array('uid'=>$uid));
    drupal_set_title(t("@username's Directory", array('@username' => $that_user-> name)));
  }
  return $page;
}

/** 
 * Implementation of hook_link)().
 * http://api.drupal.org/api/function/hook_link/6
 */
function offers_wants_link($type, $node) {
  if ($node->type != 'offer' && $node->type !='want') return; 
  $owner = user_load(array('uid'=>$node->uid));
  if ($node->type =='offer'){
    foreach ( $node->taxonomy as $term) {
      $links[$term->name . 'offers'] = array(
        'title' => t('@categoryname offers', array('@categoryname'=> $term->name)),
        'href' => 'directory/recent/offer/'.$term->name
      );
    }
    $links['contact user'] = array(
      'title' => t('contact @username', array('@username' => $owner->name)), 
      'href' => 'user/'.$node->uid.'/contact'
    );
  }elseif ($node->type =='want') {
    foreach ( $node->taxonomy as $term) {
      $links[$term->name . 'wants'] = array(
        'title' => t('@categoryname wants', array('@categoryname'=> $term->name)),
        'href' => 'directory/recent/want/'.$term->name
      );
    }
    $links['contact user'] = array(
      'title' => t('contact @username', array('@username' => $owner->name)), 
      'href' => 'user/'.$node->uid.'/contact'
    );
  }
  $links['user directory'] = array(
    'title' => t("@person's directory", array('@person'=> $owner->name)),
    'href' => 'user/'.$node->uid.'/directory'
  );
  return $links;
}
