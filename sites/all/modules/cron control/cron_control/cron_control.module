<?php
// $Id: cron_control.module,v 1.14 2011/01/29 14:46:19 mkalkbrenner Exp $

/**
 * @file
 * Using Cron Control you'll be able to fine-tune Drupal's cron,
 * especially in clustered environments.
 * Using the current version of Cron Control, you'll be able to turn on
 * or off individual cron jobs or define the server on which they should run.
 *
 * @author
 *   Markus Kalkbrenner | Cocomore AG
 */

/**
 * Implementation of hook_cron().
 */
function cron_control_cron() {
  static $first_call = TRUE;

  if ($first_call) {
    // set cron_control to be the first hook_cron to be called
    cron_control_adjust_module_weight();

    $first_call = FALSE;
    $server_addr = isset($_SERVER['SERVER_ADDR']) ? $_SERVER['SERVER_ADDR'] : '127.0.0.1';
    $moduls_invoked = array();

    foreach (module_implements('cron') as $module) {
      if ('cron_control' != $module) {
        if ($result = db_query("SELECT active FROM {cron_control_jobs} WHERE module='%s' AND server_addr='%s'", $module, $server_addr)) {
          if ($job = db_fetch_object($result)) {
            if ($job->active) {
              module_invoke($module, 'cron');
              $moduls_invoked[] = $module;
            }
          }
          else {
            $job = array(
              'module' => $module,
              'server_addr' => $server_addr,
            );

            if (drupal_write_record('cron_control_jobs', $job)) {
              watchdog('cron', 'Detected new cron job %module on server %server_addr.', array('%module' => $module, '%server_addr' => $server_addr), WATCHDOG_NOTICE);
            }
          }
        }
      }
    }
  }
  else {
    return;
  }

  // Now we have to avoid any cron job running twice.
  // Therefore, we have to terminate the execution.
  // But first we have to do the same cleanup that would happen without cron control

  // Record cron time
  /**
   * @see drupal_cron_run()
   */
  variable_set('cron_last', time());
  watchdog('cron', 'Cron run completed on server %server_addr. Moduls invoked: %moduls_invoked', array('%server_addr' => $server_addr, '%moduls_invoked' => implode(', ', $moduls_invoked)), WATCHDOG_NOTICE);

  // Release cron semaphore
  /**
   * @see drupal_cron_run()
   */
  variable_del('cron_semaphore');

  // now we have to do different things depending on how the cron has been started
  if (strpos($_SERVER['SCRIPT_FILENAME'], 'cron.php') !== FALSE) {
    // terminate cron.php
    exit();
  }
  elseif (strpos($_SERVER['SCRIPT_FILENAME'], 'drush.php') !== FALSE) {
    // cron has been started by Drush
    /**
     * @see drush_core_cron()
     */
    drush_log(dt('Cron run successfully.'), 'success');

    /**
     * @see drush_dispatch()
     */
    drush_log(dt('Command dispatch complete'), 'notice');

    /**
     * @see drush_main()
     */
    if (drush_get_context('DRUSH_DEBUG')) {
      drush_print_timers();
    }
    drush_log(dt('Peak memory usage was !peak', array('!peak' => drush_format_size(memory_get_peak_usage()))), 'memory');
    drush_set_context("DRUSH_EXECUTION_COMPLETED", TRUE);
    exit('');
  }
  else {
    // cron has been started via admin/reports/status/run-cron
    /**
     * @see system_menu()
     * @see system_run_cron()
     */
    drupal_set_message(t('Cron ran successfully.'));
    drupal_goto('admin/reports/status');
    exit();
  }
}


/**
 * Implementation of hook_menu().
 */
function cron_control_menu() {
  $items = array();

  $items['admin/settings/cron_control'] = array(
    'title' => 'Cron Control',
    'description' => "Fine-tune Drupal cron's behaviour, also in a clustered environment",
    'access callback' => 'user_access',
    'access arguments' => array('administer cron jobs'),
    'file' => 'cron_control_admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cron_control_jobs_form', 'server_addr'),
  );

  $items['admin/settings/cron_control/jobs_by_server_addr'] = array(
    'title' => 'By server address',
    'description' => "Fine-tune Drupal cron's behaviour, also in a clustered environment",
    'access callback' => 'user_access',
    'access arguments' => array('administer cron jobs'),
    'file' => 'cron_control_admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cron_control_jobs_form', 'server_addr'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/settings/cron_control/jobs_by_module'] = array(
    'title' => 'By module',
    'description' => "Fine-tune Drupal cron's behaviour, also in a clustered environment",
    'access callback' => 'user_access',
    'access arguments' => array('administer cron jobs'),
    'file' => 'cron_control_admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cron_control_jobs_form', 'module'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}


/**
 * Helper function to set cron_control's weight to the lowest of all modules.
 */
function cron_control_adjust_module_weight() {
  // set cron_control to be the first hook_cron to be called
  if ($result = db_query("SELECT MIN(weight) FROM `system` WHERE name <> 'cron_control'")) {
    $weight = db_result($result) - 1;
    db_query("UPDATE {system} SET weight = %d WHERE name = 'cron_control' AND weight <> %d", $weight, $weight);
  }
}


/**
 * Implementation of hook_requirements().
 *
 * @return
 * A keyed array of requirements. Each requirement is, itself, an array
 * with the following items:
 *  - 'title': the name of the requirement.
 *  - 'value': the current value (e.g. version, time, level, ...).
 *  - 'description': description of the requirement/status.
 *  - 'severity': the requirement's result/severity level, one of:
 *         o REQUIREMENT_INFO: For info only.
 *         o REQUIREMENT_OK: The requirement is satisfied.
 *         o REQUIREMENT_WARNING: The requirement failed with a warning.
 *         o REQUIREMENT_ERROR: The requirement failed with an error.
 */
function cron_control_requirements($phase) {
  if ($phase == 'runtime') {

    $requirements['cron_control_status'] = array(
      'title' => t('Cron Control Status'),
      'value' => t('All cron jobs are enabled.'),
      'severity' => REQUIREMENT_OK,
      'description' => '',
    );

    if (($result1 = db_query('SELECT COUNT(DISTINCT(module)) FROM {cron_control_jobs} WHERE active=1')) &&
        ($result2 = db_query('SELECT COUNT(DISTINCT(module)) FROM {cron_control_jobs}'))) {

      $m1 = db_result($result1);
      $m2 = db_result($result2);

      if ($m1 < $m2) {
        if (0 == $m1) {
          $requirements['cron_control_status']['value'] = t('All cron jobs are disabled.');
          $requirements['cron_control_status']['severity'] = REQUIREMENT_ERROR;
        }
        else {
          $requirements['cron_control_status']['value'] = t('At least one cron job is disabled on all servers.');
          $requirements['cron_control_status']['severity'] = REQUIREMENT_WARNING;
        }
        $requirements['cron_control_status']['description'] = t('See the !link page for more information.', array('!link' => l('cron control configuration', 'admin/settings/cron_control')));
      }
    }
    else {
      $requirements['cron_control_status']['value'] = t('Unknown');
      $requirements['cron_control_status']['severity'] = REQUIREMENT_WARNING;
    }

    return $requirements;
  }
}


/**
 * Implements hook_perm().
 */
function cron_control_perm() {
  return array('administer cron jobs');
}
