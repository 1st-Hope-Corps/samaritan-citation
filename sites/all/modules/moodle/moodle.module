<?php
// $Id$

/**
 * Display help and module information
 * @param $sPath		- which path of the site we're displaying help
 * @param $aArg array- holds the current path as would be returned from arg() function
 * @return help		- text for the path
 **/
function moodle_help($sPath, $aArg){
	$sOutput = '';

	switch ($sPath){
		case "admin/help#moodle":
			$sOutput = '<p>'. t("Moodle module integration.") .'</p>';
			break;
	}

	return $sOutput;
}

/**
 * Valid permissions for this module
 * @return array	- An array of valid permissions for the moodle module
 **/
function moodle_perm(){
	return array('access moodle content', 'administer moodle');
}

function moodle_menu(){
	$aItems = array();
	
	$aItems['admin/settings/moodle'] = array(
		'title' => 'Moodle Integration Settings',
		'description' => "Sets the Moodle URL to access.",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('moodle_admin'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM
	);
	
	$aItems['moodle'] = array(
		'title' => 'Tutoring Portal',
		'page callback' => 'moodle_redirect',
		'access arguments' => array('access moodle content'),
		'type' => MENU_NORMAL_ITEM
	);
	
	$aItems['getinvolved'] = array(
		'title' => 'Get Involved',
		'page callback' => 'moodle_getinvolved',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);
	
	return $aItems;
}

function moodle_getinvolved(){
	$sContent = "";
	$oArticles = db_query("SELECT A.nid, A.title, B.teaser FROM {node} A INNER JOIN {node_revisions} B ON B.nid = A.nid WHERE A.status = 1 	AND A.nid IN (12,13,14);");
	
	while ($oArticle = db_fetch_object($oArticles)){
		$iNodeId = $oArticle->nid;
		$sTitle = t($oArticle->title);
		$sTeaser = t($oArticle->teaser);
		
		$sContent .= '<div class="node">
						<div class="bg-h">
							<h1 class="title"><a href="/node/'.$iNodeId.'">'.$sTitle.'</a></h1>
							<div class="submit"><span class="submitted"/></div>
						</div>
						<div class="content"><p>'.$sTeaser.'</p></div>
						<div class="links-indent">
							<div class="bg-links">
								<div class="links-left">
									<div class="links-right">
										<div class="links">
											<ul class="links inline">
												<li class="comment_add first"><a title="Add a new comment to this page." href="/comment/reply/'.$iNodeId.'#comment-form">Add new comment</a></li>
												<li class="node_read_more last"><a title="Read the rest of Learn about Advocacy." href="/node/'.$iNodeId.'">Read more</a></li>
											</ul>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					';
	}
	
	return $sContent;
}

function moodle_redirect(){
	global $user;
	
	$sRawPass = variable_get("pass_unmasked_".$user->name, "");
	
	$sHTML = 'Go to <a href="javascript:document.login.submit()">Moodle</a>
				<form id="login" name="login" method="post" action="'.variable_get('moodle_url', '#').'/login/index.php" target="_new" style="display:none;">
					<input id="username" name="username" type="text" value="'.$user->name.'" />
					<input id="password" name="password" type="password" value="'.$sRawPass.'" />
					<input type="submit" value="Login"/>
				</form>';
	
	return $sHTML;
}

function moodle_admin(){
	$aForm['moodle_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Moodle URL'),
		'#default_value' => variable_get('moodle_url', 'http://www.YourMoodleDomainHere.com'),
		'#size' => 50,
		'#maxlength' => 50,
		'#description' => t('The URL of the Moodle site to access.'),
		'#required' => TRUE
	);
	
	return system_settings_form($aForm);
}

function moodle_admin_validate($oForm, &$aFormState){
	$sMoodleURL = trim($aFormState['values']['moodle_url']);
	
	if (!preg_match('!^((ftp|(http(s)?))://)?(\.?([a-z0-9-]+))+\.[a-z]{2,6}(:[0-9]{1,5})?(/[a-zA-Z0-9.,;\?|\'+&%\$#=~_-]+)*$!i', $sMoodleURL)){
		form_set_error('moodle_url', t('Invalid URL format.'));
	}
}

function moodle_user($sOperation, &$aFormVals, &$oUser, $sCategory=NULL){
	global $user;
	
	$iDrupalId = $oUser->uid;
	$iMoodleUserId = _moodle_get_id($iDrupalId);
	
	switch ($sOperation){
		case "login":
			//variable_set("pass_unmasked_".$oUser->name, $aFormVals["pass"]);
			
			break;
			
		case "insert":
			$aNewRoles = $aFormVals["roles"];
			
			variable_set("pass_unmasked_".$oUser->name, $oUser->pass);
			
			$aProfile = _moodle_get_details($iDrupalId);
			$sqlMoodle = "INSERT INTO {mdl_user} 
							VALUES(
								NULL, 
								'manual', 
								1,
								0, 
								0, 
								1, 
								'".$oUser->name."', 
								'".$oUser->pass."', 
								'".$iDrupalId."', 
								'".$aProfile["profile_first_name"]."', 
								'".$aProfile["profile_last_name"]."', 
								'".$oUser->mail."', 
								0, 
								'', 
								'', 
								'', 
								'', 
								'', 
								'', 
								'', 
								'', 
								'', 
								'".$aProfile["profile_address"]."', 
								'', 
								'', 
								'en_utf8', 
								'', 
								'0.0', 
								0, 
								0, 
								0, 
								0, 
								'', 
								'', 
								0, 
								'', 
								NULL, 
								1, 
								0, 
								0, 
								1, 
								1, 
								1, 
								0, 
								0, 
								0, 
								NULL, 
								0
							)";
			
			db_set_active('moodle');
			
			db_query($sqlMoodle);
			$iMoodleUserId = db_last_insert_id("mdl_user", "id");
			
			db_set_active('default');
			
			if (count($aNewRoles) > 1) _moodle_set_role($aNewRoles, array(), $iMoodleUserId);
						
			break;
		
		case "update":
			$aCurrRoles = $oUser->roles;
			$aNewRoles = $aFormVals["roles"];
			$sPass = ($aFormVals["pass"] != "") ? $aFormVals["pass"]:variable_get("pass_unmasked_".$oUser->name, "");
			$aProfile = _moodle_get_details($iDrupalId);
			
			variable_set("pass_unmasked_".$oUser->name, $sPass);
			
			$sqlUpdate = "UPDATE {mdl_user} 
							SET firstname = '".$aProfile["profile_first_name"]."',
								lastname = '".$aProfile["profile_last_name"]."',
								email = '".$oUser->mail."',
								address = '".$aProfile["profile_address"]."'";
			$sqlUpdate .= (trim($aFormVals["pass"]) != "") ? ", password = MD5('".$aFormVals["pass"]."')":"";
			$sqlUpdate .= " WHERE id = %d";
			
			db_set_active('moodle');
			db_query($sqlUpdate, $iMoodleUserId);
			
			if (count($aNewRoles) > 1){
				_moodle_set_role($aNewRoles, $aCurrRoles, $iMoodleUserId);
			}else{
				// Update Moodle user's User Type/Role. Back to default role.
				$sqlRemoveRole = "DELETE FROM {mdl_role_assignments} WHERE userid = %d";
				
				db_set_active('moodle');
				db_query($sqlRemoveRole, $iMoodleUserId);
			}
			
			db_set_active('default');
			
			break;
		
		case "delete":
			$sqlRemoveRole = "DELETE FROM {mdl_role_assignments} WHERE userid = %d";
			$sqlDelete = "UPDATE {mdl_user} 
							SET deleted = 1,
								username = CONCAT(email, '.', UNIX_TIMESTAMP()), 
								email = '' 
							WHERE id = %d";
			
			db_set_active('moodle');
			
			db_query($sqlRemoveRole, $iMoodleUserId);
			db_query($sqlDelete, $iMoodleUserId);
			
			db_set_active('default');
			
			break;
	}
}

/**
 * Reusable functions/callbacks
 **/
function _moodle_get_details($iUserId){
	$sqlProfile = "SELECT B.uid, A.name, B.value 
					FROM {profile_fields} A INNER JOIN {profile_values} B ON A.fid = B.fid 
					WHERE B.uid = %d";
	
	$oQueryResult = db_query($sqlProfile, $iUserId);
	$aDetails = array();
	
	while ($oDetails = db_fetch_object($oQueryResult)){
		$aDetails[$oDetails->name] = $oDetails->value;
	}
	
	return $aDetails;
}

function _moodle_get_id($iUserId){
	$sqlUserId = "SELECT id FROM {mdl_user} WHERE idnumber = %d";
	
	db_set_active('moodle');
	$iMoodleId = db_result(db_query($sqlUserId, $iUserId));
	db_set_active('default');
	
	return $iMoodleId;
}

function _moodle_set_role($aNewRoles, $aCurrRoles, $iMoodleUserId){
	db_set_active('moodle');
	
	/*
	Drupal						Moodle
	1 = Anonymous User		=>	6 = Guest
	2 = Authenticated User	=>	7 = Authenticated User
	4 = Tutor				=>	3 = Teacher
	5 = Staff				=>	
	6 = Mentor				=>	8 = Mentor
	7 = Sponsor				=>	
	8 = Customized			=>	
	9 = Child				=>	5 = Student
	11 = Moderator			=>  9 = Moderator
	17 = Employee           =>  10 = Employee
	*/
	
	$aRoleID = array(1 => 6, 4 => 3, 6 => 8, 9 => 5, 11 => 9, 17 => 10);
	
	foreach ($aCurrRoles as $iRoleKey => $sRoleId){
		if (!array_key_exists($iRoleKey, $aNewRoles)){
			$sqlRemoveRole = "DELETE FROM {mdl_role_assignments} WHERE roleid = %d AND userid = %d";
			
			db_query($sqlRemoveRole, $aRoleID[$iRoleKey], $iMoodleUserId);
		}
	}
	
	foreach ($aNewRoles as $sKey => $sVal){
		if ($sKey != 2){
			// Update Moodle user's User Type/Role. Add new role.
			$iNewRole = $aRoleID[$sKey];
			
			$sqlCheck = "SELECT id FROM {mdl_role_assignments} WHERE roleid = %d AND userid = %d";
			$bExist = (is_numeric(db_result(db_query($sqlCheck, $iNewRole, $iMoodleUserId)))) ? true:false;
			
			if (!$bExist){
				$sqlAddRole = "INSERT INTO {mdl_role_assignments} 
								VALUES(
									NULL, 
									".(!$iNewRole ? 7:$iNewRole).", 
									1,
									".$iMoodleUserId.", 
									0, 
									UNIX_TIMESTAMP(), 
									0, 
									UNIX_TIMESTAMP(), 
									2, 
									'manual', 
									0
								)";
				
				//db_query($sqlAddRole);
			}
		}
	}
	
	db_set_active('default');
}